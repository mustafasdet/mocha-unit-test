{"version":3,"file":"/Users/tarikazra/Desktop/ts-js/mocha-chai-unit-testing---/src/calculator.ts","sources":["/Users/tarikazra/Desktop/ts-js/mocha-chai-unit-testing---/src/calculator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,4BAA4B;AAC5B,kDAA0B;AAC1B,MAAM,OAAO,GAAG,sCAAsC,CAAC;AACvD,MAAM,UAAU;IACZ,GAAG,CAAC,IAAY,EAAE,IAAY;QAC1B,OAAO,IAAI,GAAG,IAAI,CAAC;IACvB,CAAC;IACD,mBAAmB,CAAC,IAAY,EAAE,IAAY;QAC1C,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QACnC,OAAO,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC;IAC9B,CAAC;IACD,SAAS,CAAC,IAAY,EAAE,IAAY;QAChC,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAA;QACjC,OAAO,IAAI,GAAG,IAAI,CAAC;IACvB,CAAC;IACD,QAAQ,CAAC,IAAY,EAAE,IAAY;QAC/B,OAAO,IAAI,GAAG,IAAI,CAAA;IACtB,CAAC;IACD,cAAc,CAAC,IAAY,EAAE,IAAY;QACrC,IAAI,CAAC,UAAU,CAAC,2BAA2B,CAAC,CAAC;QAC7C,OAAO,IAAI,GAAG,IAAI,CAAA;IACtB,CAAC;IACD,QAAQ,CAAC,IAAY,EAAE,IAAY;QAC/B,OAAO,IAAI,GAAG,IAAI,CAAA;IACtB,CAAC;IACD,MAAM,CAAC,IAAY,EAAE,IAAY;QAC7B,IAAI,IAAI,KAAK,CAAC,EAAE,CAAC;YACb,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAA;QAC/C,CAAC;QACD,OAAO,IAAI,GAAG,IAAI,CAAC;IACvB,CAAC;IAED,cAAc;QACV,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAA,sCAAsC;QAC7F,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,WAAW,CAAC,CAAA;QACvC,OAAO,WAAW,CAAC;IACvB,CAAC;IAED,UAAU,CAAC,GAAW;QAClB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACrB,CAAC;IAED,oBAAoB;QAChB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnC,UAAU,CAAC,GAAG,EAAE;gBACZ,OAAO,CAAC,CAAC,CAAC,CAAA;YACd,CAAC,EAAE,IAAI,CAAC,CAAC;QACb,CAAC,CAAC,CAAA;IACN,CAAC;IACK,OAAO;;YACT,OAAO,MAAM,eAAK,CAAC,GAAG,CAAC,GAAG,OAAO,UAAU,CAAC,CAAA;QAChD,CAAC;KAAA;IAEK,UAAU,CAAC,WAAmB;;YAChC,OAAO,MAAM,eAAK,CAAC,IAAI,CAAC,GAAG,OAAO,QAAQ,EAAE,WAAW,CAAC,CAAC;QAC7D,CAAC;KAAA;CACJ;AACD,kBAAe,UAAU,CAAC","sourcesContent":["// export class Calculator {\nimport axios from 'axios';\nconst baseUrl = `https://jsonplaceholder.typicode.com`;\nclass Calculator {\n    add(num1: number, num2: number) {\n        return num1 + num2;\n    }\n    addWithRandomNumber(num1: number, num2: number) {\n        const num3 = this.getRandomValue();\n        return num1 + num2 + num3;\n    }\n    addLogMsg(num1: number, num2: number) {\n        this.logMessage('logging LogMsg')\n        return num1 + num2;\n    }\n    subtract(num1: number, num2: number) {\n        return num1 - num2\n    }\n    subtractLogMsg(num1: number, num2: number) {\n        this.logMessage('logging in subtractLogMsg');\n        return num1 - num2\n    }\n    multiply(num1: number, num2: number) {\n        return num1 * num2\n    }\n    divide(num1: number, num2: number) {\n        if (num2 === 0) {\n            throw new Error(`divident can not be zero`)\n        }\n        return num1 / num2;\n    }\n\n    getRandomValue(): number {\n        const randomValue = Math.floor(Math.random() * 10 + 1);// returns a random value between 1-10\n        console.log('randomValue', randomValue)\n        return randomValue;\n    }\n\n    logMessage(msg: string) {\n        console.log(msg);\n    }\n\n    asyncFunctionPromise() {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                resolve(4)\n            }, 1000);\n        })\n    }\n    async getUser() {\n        return await axios.get(`${baseUrl}/users/1`)\n    }\n\n    async createUser(userpayload: object) {\n        return await axios.post(`${baseUrl}/users`, userpayload);\n    }\n}\nexport default Calculator;"]}